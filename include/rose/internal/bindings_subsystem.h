#pragma once

///////////////////////////////////////////////////
// AUTOGENERATED: 
// DO NOT EDIT THIS FILE
// EDIT: roselib/internal/generate_bindings.py
// Bindings hash: 22471
///////////////////////////////////////////////////
#include <rose/hash.h>
#include <rose/eventqueue.h>
#include <rose/internal/singletonregister.h>

#include <roselib/context.h>
#include <rose/internal/bindings_typedef.h>
#include <rose/internal/singletonregister.h>
ROSE_EXPORT rose_internal_get_event_queue_ft c_rose_internal_get_event_queue;
ROSE_EXPORT rose_internal_get_singleton_register_ft c_rose_internal_get_singleton_register;
ROSE_EXPORT rose_filewatcher_watch_path_ft c_rose_filewatcher_watch_path;
ROSE_EXPORT rose_filewatcher_unwatch_path_ft c_rose_filewatcher_unwatch_path;

#ifdef __cplusplus
namespace rose {
namespace filewatcher {
  inline int watch_path(const char * path) {
    return c_rose_filewatcher_watch_path(path);
  }
}
namespace filewatcher {
  inline bool unwatch_path(int id) {
    return c_rose_filewatcher_unwatch_path(id);
  }
}
namespace event {
  template<class T> 
  void broadcast(const T & event) {
    c_rose_internal_get_event_queue()->push_back(event);
  }
}
namespace world {
  template<class T> 
  T & get() {
    return c_rose_internal_get_singleton_register().Get<T>();
  }
}
}
#endif
