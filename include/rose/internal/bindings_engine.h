#pragma once

///////////////////////////////////////////////////
// AUTOGENERATED: 
// DO NOT EDIT THIS FILE
// EDIT: roselib/internal/generate_bindings.py
// Bindings hash: 15226
///////////////////////////////////////////////////
#include <rose/hash.h>
#include <rose/eventqueue.h>

#include <rose/internal/bindings_typedef.h>

namespace subsystem_bindings {
rose::EventQueue* g_rose_internal_get_event_queue();
int g_rose_filewatcher_watch_path(const char * path);
bool g_rose_filewatcher_unwatch_path(int id);
}

template<class Lambda>
void inject_bindings(void* handle, Lambda get_symbol_address) {
  {
    auto fun = (rose_internal_get_event_queue_ft*)(get_symbol_address(handle, "c_rose_internal_get_event_queue"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_internal_get_event_queue;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_internal_get_event_queue");
    }
  }
  {
    auto fun = (rose_filewatcher_watch_path_ft*)(get_symbol_address(handle, "c_rose_filewatcher_watch_path"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_filewatcher_watch_path;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_filewatcher_watch_path");
    }
  }
  {
    auto fun = (rose_filewatcher_unwatch_path_ft*)(get_symbol_address(handle, "c_rose_filewatcher_unwatch_path"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_filewatcher_unwatch_path;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_filewatcher_unwatch_path");
    }
  }
}
