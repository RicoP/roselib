#pragma once

///////////////////////////////////////////////////
// AUTOGENERATED: 
// DO NOT EDIT THIS FILE
// EDIT: roselib/internal/generate_bindings.py
// Bindings hash: 4577
///////////////////////////////////////////////////
#include <roselib/context.h>

typedef float (*rose_utils_add_ft)(float a, float b);

#ifndef ROSE_ENGINE_INTERNAL
ROSE_EXPORT rose_utils_add_ft c_rose_utils_add;

#ifdef __cplusplus
namespace rose {
namespace utils {
  inline float add(float a, float b) {
    return c_rose_utils_add(a, b);
  }
}
}
#endif

#else

#ifdef _WIN32
#include <windows.h>
#endif
float g_rose_utils_add(float a, float b);
//TODO: create unix binding.
inline void inject_bindings(HMODULE handle) { 
  {
    auto fun = (rose_utils_add_ft*)(GetProcAddress(handle, "c_rose_utils_add"));
    if(GetLastError() == 0) {
      *fun = g_rose_utils_add;
    } else {
      fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_utils_add");
    }
  }
}
#endif

static rose_utils_add_ft c_rose_utils_add = 0;
#endif 
