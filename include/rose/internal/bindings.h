#pragma once

////////////////////////////////////////
// AUTOGENERATED: 
// DO NOT EDIT THIS FILE
// EDIT: roselib/internal/generate_bindings.py
// Bindings hash: 15226
///////////////////////////////////////////////////
#include <roselib/context.h>
#include <rose/hash.h>
#include <cstdio>

typedef rose::EventQueue* (*rose_internal_get_event_queue_ft)();
typedef int (*rose_filewatcher_watch_path_ft)(const char * path);
typedef bool (*rose_filewatcher_unwatch_path_ft)(int id);

#ifndef ROSE_ENGINE_INTERNAL
ROSE_EXPORT rose_internal_get_event_queue_ft c_rose_internal_get_event_queue;
ROSE_EXPORT rose_filewatcher_watch_path_ft c_rose_filewatcher_watch_path;
ROSE_EXPORT rose_filewatcher_unwatch_path_ft c_rose_filewatcher_unwatch_path;

#ifdef __cplusplus
namespace rose {
namespace filewatcher {
  inline int watch_path(const char * path) {
    return c_rose_filewatcher_watch_path(path);
  }
}
namespace filewatcher {
  inline bool unwatch_path(int id) {
    return c_rose_filewatcher_unwatch_path(id);
  }
}
namespace event {
  template<class T> 
  void broadcast(const T & event) {
    c_rose_internal_get_event_queue().push_back(event);
  }
}
}
#endif

#else

#ifdef _WIN32
#include <windows.h>
#endif

namespace subsystem_bindings {
rose::EventQueue* g_rose_internal_get_event_queue();
int g_rose_filewatcher_watch_path(const char * path);
bool g_rose_filewatcher_unwatch_path(int id);
}

//TODO: create unix binding.
inline void inject_bindings(HMODULE handle) { 
  {
    auto fun = (rose_internal_get_event_queue_ft*)(GetProcAddress(handle, "c_rose_internal_get_event_queue"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_internal_get_event_queue;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_internal_get_event_queue");
    }
  }
  {
    auto fun = (rose_filewatcher_watch_path_ft*)(GetProcAddress(handle, "c_rose_filewatcher_watch_path"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_filewatcher_watch_path;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_filewatcher_watch_path");
    }
  }
  {
    auto fun = (rose_filewatcher_unwatch_path_ft*)(GetProcAddress(handle, "c_rose_filewatcher_unwatch_path"));
    if(fun) {
      *fun = subsystem_bindings::g_rose_filewatcher_unwatch_path;
    } else {
      std::fprintf(stderr, "Warning: Couldn't find function %s \n", "c_rose_filewatcher_unwatch_path");
    }
  }
}
#endif

