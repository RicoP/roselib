///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <rose/ecs.h>
#include <cstring>

#include <components/objectid.h>
#include <components/collider.h>
#include <components/meshassetref.h>
#include <components/textureassetref.h>
#include <components/transform.h>
namespace rose {
namespace ecs {
struct SceneObject {
  ObjectID ID;
  Collider collider;
  MeshAssetRef mesh;
  TextureAssetRef texture;
  Transform transform;

  bool equals(const SceneObject & rhs) const {
    return
      ID == rhs.ID &&
      collider == rhs.collider &&
      mesh == rhs.mesh &&
      texture == rhs.texture &&
      transform == rhs.transform;
  }
};

inline void construct_defaults(SceneObject & o) {
  std::memset(&o, 0, sizeof(SceneObject));
  o.ID = idgen();
  construct_defaults(o.collider);
  construct_defaults(o.mesh);
  construct_defaults(o.texture);
  construct_defaults(o.transform);
}

inline bool operator==(const SceneObject &lhs, const SceneObject &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const SceneObject &lhs, const SceneObject &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(SceneObject &o, ISerializer &s) {
  if(s.node_begin("SceneObject", rose::hash("SceneObject"), &o)) {
    s.key("ID");
    serialize(o.ID, s);
    s.key("collider");
    serialize(o.collider, s);
    s.key("mesh");
    serialize(o.mesh, s);
    s.key("texture");
    serialize(o.texture, s);
    s.key("transform");
    serialize(o.transform, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(SceneObject &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("ID"):
        deserialize(o.ID, s);
        break;
      case rose::hash("collider"):
        deserialize(o.collider, s);
        break;
      case rose::hash("mesh"):
        deserialize(o.mesh, s);
        break;
      case rose::hash("texture"):
        deserialize(o.texture, s);
        break;
      case rose::hash("transform"):
        deserialize(o.transform, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(SceneObject &o, rose::hash_value & h) {
  randomize(o.ID, h);
  randomize(o.collider, h);
  randomize(o.mesh, h);
  randomize(o.texture, h);
  randomize(o.transform, h);
}
} //namespace ecs

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
  inline hash_value hash(const ecs::SceneObject &o) {
    hash_value h = hash(o.ID);
    h = xor64(h);
    h ^= hash(o.collider);
    h = xor64(h);
    h ^= hash(o.mesh);
    h = xor64(h);
    h ^= hash(o.texture);
    h = xor64(h);
    h ^= hash(o.transform);
    return h;
  }
} //namespace rose
