///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <rose/ecs.h>
#include <cstring>

#include <components/vector3.h>
#include <components/vector3.h>
#include <components/vector2.h>
#include <components/vector3.h>
#include <components/soundassetref.h>
#include <components/objectid.h>
#include <components/transform.h>
#include <components/vector3.h>
namespace rose {
namespace ecs {
struct Kraxler {
  vector3 barycentric;
  vector3 cam_offset;
  vector2 cam_speed;
  float heroRunSpeed;
  float heroWalkSpeed;
  vector3 inputv;
  bool jump;
  SoundAssetRef jump_sound;
  ObjectID renderObject;
  Transform transform;
  int triangle;
  vector3 velocity;

  bool equals(const Kraxler & rhs) const {
    return
      barycentric == rhs.barycentric &&
      cam_offset == rhs.cam_offset &&
      cam_speed == rhs.cam_speed &&
      heroRunSpeed == rhs.heroRunSpeed &&
      heroWalkSpeed == rhs.heroWalkSpeed &&
      inputv == rhs.inputv &&
      jump == rhs.jump &&
      jump_sound == rhs.jump_sound &&
      renderObject == rhs.renderObject &&
      transform == rhs.transform &&
      triangle == rhs.triangle &&
      velocity == rhs.velocity;
  }
};

inline void construct_defaults(Kraxler & o) {
  std::memset(&o, 0, sizeof(Kraxler));
  o.barycentric = ::vector(1,1,1);
  o.cam_offset = ::vector(0,0,1);
  o.cam_speed = ::vector(0.05f,0.05f);
  o.heroRunSpeed = 0.9f;
  o.heroWalkSpeed = 0.3f;
  construct_defaults(o.inputv);
  construct_defaults(o.jump_sound);
  construct_defaults(o.renderObject);
  construct_defaults(o.transform);
  construct_defaults(o.velocity);
}

inline bool operator==(const Kraxler &lhs, const Kraxler &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const Kraxler &lhs, const Kraxler &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(Kraxler &o, ISerializer &s) {
  if(s.node_begin("Kraxler", rose::hash("Kraxler"), &o)) {
    s.key("barycentric");
    serialize(o.barycentric, s);
    s.key("cam_offset");
    serialize(o.cam_offset, s);
    s.key("cam_speed");
    serialize(o.cam_speed, s);
    s.key("heroRunSpeed");
    serialize(o.heroRunSpeed, s);
    s.key("heroWalkSpeed");
    serialize(o.heroWalkSpeed, s);
    s.key("inputv");
    serialize(o.inputv, s);
    s.key("jump");
    serialize(o.jump, s);
    s.key("jump_sound");
    serialize(o.jump_sound, s);
    s.key("renderObject");
    serialize(o.renderObject, s);
    s.key("transform");
    serialize(o.transform, s);
    s.key("triangle");
    serialize(o.triangle, s);
    s.key("velocity");
    serialize(o.velocity, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(Kraxler &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("barycentric"):
        deserialize(o.barycentric, s);
        break;
      case rose::hash("cam_offset"):
        deserialize(o.cam_offset, s);
        break;
      case rose::hash("cam_speed"):
        deserialize(o.cam_speed, s);
        break;
      case rose::hash("heroRunSpeed"):
        deserialize(o.heroRunSpeed, s);
        break;
      case rose::hash("heroWalkSpeed"):
        deserialize(o.heroWalkSpeed, s);
        break;
      case rose::hash("inputv"):
        deserialize(o.inputv, s);
        break;
      case rose::hash("jump"):
        deserialize(o.jump, s);
        break;
      case rose::hash("jump_sound"):
        deserialize(o.jump_sound, s);
        break;
      case rose::hash("renderObject"):
        deserialize(o.renderObject, s);
        break;
      case rose::hash("transform"):
        deserialize(o.transform, s);
        break;
      case rose::hash("triangle"):
        deserialize(o.triangle, s);
        break;
      case rose::hash("velocity"):
        deserialize(o.velocity, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(Kraxler &o, rose::hash_value & h) {
  randomize(o.barycentric, h);
  randomize(o.cam_offset, h);
  randomize(o.cam_speed, h);
  randomize(o.heroRunSpeed, h);
  randomize(o.heroWalkSpeed, h);
  randomize(o.inputv, h);
  randomize(o.jump, h);
  randomize(o.jump_sound, h);
  randomize(o.renderObject, h);
  randomize(o.transform, h);
  randomize(o.triangle, h);
  randomize(o.velocity, h);
}
} //namespace ecs

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
  inline hash_value hash(const ecs::Kraxler &o) {
    hash_value h = hash(o.barycentric);
    h = xor64(h);
    h ^= hash(o.cam_offset);
    h = xor64(h);
    h ^= hash(o.cam_speed);
    h = xor64(h);
    h ^= hash(o.heroRunSpeed);
    h = xor64(h);
    h ^= hash(o.heroWalkSpeed);
    h = xor64(h);
    h ^= hash(o.inputv);
    h = xor64(h);
    h ^= hash(o.jump);
    h = xor64(h);
    h ^= hash(o.jump_sound);
    h = xor64(h);
    h ^= hash(o.renderObject);
    h = xor64(h);
    h ^= hash(o.transform);
    h = xor64(h);
    h ^= hash(o.triangle);
    h = xor64(h);
    h ^= hash(o.velocity);
    return h;
  }
} //namespace rose
