///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <cstring>

#include <components/camera.h>
namespace rose {
struct MicroSystem {
  Camera camera;
  rose::hash_value hash;
  rose::string<64> name;

  bool equals(const MicroSystem & rhs) const {
    return
      camera == rhs.camera &&
      hash == rhs.hash &&
      name == rhs.name;
  }
};

inline void construct_defaults(MicroSystem & o) {
  std::memset(&o, 0, sizeof(MicroSystem));
  construct_defaults(o.camera);
}

inline bool operator==(const MicroSystem &lhs, const MicroSystem &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const MicroSystem &lhs, const MicroSystem &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(MicroSystem &o, ISerializer &s) {
  if(s.node_begin("MicroSystem", rose::hash("MicroSystem"), &o)) {
    s.key("camera");
    serialize(o.camera, s);
    s.key("hash");
    serialize(o.hash, s);
    s.key("name");
    serialize(o.name, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(MicroSystem &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("camera"):
        deserialize(o.camera, s);
        break;
      case rose::hash("hash"):
        deserialize(o.hash, s);
        break;
      case rose::hash("name"):
        deserialize(o.name, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(MicroSystem &o, rose::hash_value & h) {
  randomize(o.camera, h);
  randomize(o.hash, h);
  randomize(o.name, h);
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
  inline hash_value hash(const MicroSystem &o) {
    hash_value h = hash(o.camera);
    h = xor64(h);
    h ^= hash(o.hash);
    h = xor64(h);
    h ^= hash(o.name);
    return h;
  }
} //namespace rose
