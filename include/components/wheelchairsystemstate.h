///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <cstring>

#include <components/objectid.h>
namespace rose {
struct WheelchairSystemState {
  ObjectID object;

  bool equals(const WheelchairSystemState & rhs) const {
    return
      object == rhs.object;
  }
};

inline void construct_defaults(WheelchairSystemState & o) {
  std::memset(&o, 0, sizeof(WheelchairSystemState));
  construct_defaults(o.object);
}

inline bool operator==(const WheelchairSystemState &lhs, const WheelchairSystemState &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const WheelchairSystemState &lhs, const WheelchairSystemState &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(WheelchairSystemState &o, ISerializer &s) {
  if(s.node_begin("WheelchairSystemState", rose::hash("WheelchairSystemState"), &o)) {
    s.key("object");
    serialize(o.object, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(WheelchairSystemState &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("object"):
        deserialize(o.object, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(WheelchairSystemState &o, RHash & h) {
  randomize(o.object, h);
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
  inline RHash hash(const WheelchairSystemState &o) {
    RHash h = hash(o.object);
    return h;
  }
} //namespace rose
