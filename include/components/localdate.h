///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <cstring>

namespace rose {
struct LocalDate {
  int date;
  int time;

  bool equals(const LocalDate & rhs) const {
    return
      date == rhs.date &&
      time == rhs.time;
  }
};

inline void construct_defaults(LocalDate & o) {
  std::memset(&o, 0, sizeof(LocalDate));
}

inline bool operator==(const LocalDate &lhs, const LocalDate &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const LocalDate &lhs, const LocalDate &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(LocalDate &o, ISerializer &s) {
  if(s.node_begin("LocalDate", rose::hash("LocalDate"), &o)) {
    s.key("date");
    serialize(o.date, s);
    s.key("time");
    serialize(o.time, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(LocalDate &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("date"):
        deserialize(o.date, s);
        break;
      case rose::hash("time"):
        deserialize(o.time, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(LocalDate &o, rose::hash_value & h) {
  randomize(o.date, h);
  randomize(o.time, h);
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
  inline hash_value hash(const LocalDate &o) {
    hash_value h = hash(o.date);
    h = xor64(h);
    h ^= hash(o.time);
    return h;
  }
} //namespace rose
